// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       UserRole @default(USER)
  avatar     String
  isActive   Boolean  @default(true)
  isVerified Boolean  @default(false)

  establishments    Establishment[]
  establishmentsOwn EstablishmentUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Establishment {
  id               String  @id @default(uuid())
  name             String
  shortDescription String
  description      String
  address          String
  phone            String
  email            String
  website          String
  image            String
  latitude         Float
  longitude        Float
  averagePrice     Float
  type             String
  category         String
  rating           Float
  isVerified       Boolean @default(false)
  isActive         Boolean @default(true)

  adminId String
  admin   User   @relation(fields: [adminId], references: [id])

  rooms     Room[]
  users     EstablishmentUser[]
  providers Provider[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("establishments")
}

model EstablishmentUser {
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  establishmentId String
  establishment   Establishment @relation(fields: [establishmentId], references: [id])

  @@id([userId, establishmentId])
  @@map("establishment_users")
}

model Room {
  id          String @id @default(uuid())
  name        String
  description String
  value       Float

  establishmentId String
  establishment   Establishment @relation(fields: [establishmentId], references: [id])

  @@map("rooms")
}

model Provider {
  id          String @id @default(uuid())
  name        String
  description String
  value       Float

  establishmentId String
  establishment   Establishment @relation(fields: [establishmentId], references: [id])

  @@map("providers")
}

enum UserRole {
  ADMIN
  USER
}
